# Learn more about services, parameters and containers at
# https://symfony.com/doc/current/service_container.html
parameters:
  mercredi.email_sender: '%env(MERCREDI_FROM)%'
  mercredi.accueil_prix: '%env(MERCREDI_ACCUEIL_PRIX)%'
  mercredi.presence_deadline_days: '%env(MERCREDI_PRESENCE_DEADLINE_DAYS)%'
  mercredi.pedagogique_deadline_days: '%env(MERCREDI_PEDAGOGIQUE_DEADLINE_DAYS)%'

services:
  # default configuration for services in *this* file
  _defaults:
    # automatically injects dependencies in your services
    autowire: true
    # automatically registers your services as commands, event subscribers, etc.
    autoconfigure: true
    # this means you cannot fetch services directly from the container via $container->get()
    # if you need to do this, you can override this setting on individual services
    public: false

  # makes classes in src/App available to be used as services
  # this creates a service per class whose id is the fully-qualified class name
  AcMarche\Mercredi\:
    resource: '../src/*'
    # you can exclude directories or files
    # but if a service is unused, it's removed anyway
    exclude: '../src/{Entity,Tests2}'

  AcMarche\Mercredi\Namer\DirectoryNamer:
    public: true

  AcMarche\Mercredi\Jour\Tarification\Form\TarificationFormGeneratorInterface:
    alias: AcMarche\Mercredi\Jour\Tarification\Form\TarificationHottonFormGenerator

  AcMarche\Mercredi\Presence\Calculator\PresenceCalculatorInterface:
    alias: AcMarche\Mercredi\Presence\Calculator\PrenceHottonCalculator

  AcMarche\Mercredi\Plaine\Calculator\PlaineCalculatorInterface:
    alias: AcMarche\Mercredi\Plaine\Calculator\PlaineHottonCalculator

  Fidry\AliceDataFixtures\LoaderInterface:
    #alias: 'fidry_alice_data_fixtures.doctrine.persister_loader' //ne purge pas
    alias: 'fidry_alice_data_fixtures.loader.doctrine'

  _instanceof:
    AcMarche\Mercredi\ServiceIterator\AfterUserRegistration:
      tags: ['app.user.after_registration'] # add this tag to all classes implementing this interface
    AcMarche\Mercredi\Presence\Constraint\PresenceConstraintInterface:
      tags: ['mercredi.presence_constraint'] # add this tag to all classes implementing this interface

  AcMarche\Mercredi\ServiceIterator\Register:
    arguments:
      $secondaryFlows: !tagged_iterator 'app.user.after_registration' # grab all services tagged with this tag

  AcMarche\Mercredi\Presence\Constraint\PresenceConstraints:
    arguments:
      $constraints: !tagged_iterator 'mercredi.presence_constraint' # grab all services tagged with this tag
